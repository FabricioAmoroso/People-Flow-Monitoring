# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FlowMonitorUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from distanciamento import FlowMonitor

from PyQt5.QtWidgets import QWidget, QGridLayout, QPushButton, QSizePolicy, QApplication, QComboBox, QCheckBox , QApplication, QWidget, QLabel
from PyQt5.QtGui import QIcon, QPixmap

import numpy as np
import cv2

from threading import Thread

class Ui_MainWindow(QWidget):
    def __init__(self):
        super().__init__()

        available_cams = ["/home/gustavostahl/LabVisao/NBA_reconstruction/Different_short_passes/NBA2K21 03-06-2021 13-21-15.mp4",
                          "/home/gustavostahl/LabVisao/NBA_reconstruction/Different_short_passes/NBA2K21 03-06-2021 14-28-37.mp4",
                          "/home/gustavostahl/LabVisao/NBA_reconstruction/Different_short_passes/NBA2K21 03-06-2021 14-20-29.mp4",
                          "/home/gustavostahl/LabVisao/NBA_reconstruction/Different_short_passes/NBA2K21 03-06-2021 14-12-25.mp4"]

        source = available_cams[0]
        weights = "/home/gustavostahl/Ras/Monitorador/yolov5_modified/yolov5s.pt"

        pipeline_thread = self.RunPipeline(FlowMonitor(source, weights), *[False]*3)

        self.pipeline_thread = pipeline_thread
        self.available_cams = available_cams

        self.setupUi()

    def setupUi(self):
        self.setWindowTitle("Flow Monitor") #nome do monitor
        self.resize(1800, 900)              #mudando o tamanho
        
        #camcombobox
        cams_combo_box = QComboBox()
        cams_combo_box.setObjectName("cams_combo_box")
        for cam_index in range(len(self.available_cams)):
            cams_combo_box.addItem(f"Camera {cam_index}")
        #checkbox
        checkbox_counter = QCheckBox("Contador")
        checkbox_distance = QCheckBox("Distanciamento")
        checkbox_heatmap = QCheckBox("Heatmap")
        #botoes
        prev_cam_button = QPushButton("Anterior")
        next_cam_button = QPushButton("Proximo")
        #imagem
        label = QLabel()
        label.setMaximumSize(10000,5000)
        label.setMinimumSize(800,500)
        label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        total = QGridLayout()   
        self.setLayout(total)  

        total.addWidget(cams_combo_box,1,0)
        total.addWidget(checkbox_counter,2,0)
        total.addWidget(checkbox_distance,3,0)
        total.addWidget(checkbox_heatmap,4,0)
        total.addWidget(prev_cam_button,7,2)
        total.addWidget(next_cam_button,7,3)
        total.addWidget(label,5,2,2,2)
        self.setGeometry(300, 300, 250, 150)

        self.label = label
        self.cams_combo_box = cams_combo_box
        self.checkbox_counter = checkbox_counter
        self.checkbox_distance = checkbox_distance
        self.checkbox_heatmap = checkbox_heatmap
        self.prev_cam_button = prev_cam_button
        self.next_cam_button = next_cam_button     

        self.linkComponentToMethod()

    def counter(self, state):
        self.pipeline_thread.use_counter = state == QtCore.Qt.Checked

    def distance(self, state):
        self.pipeline_thread.use_distance = state == QtCore.Qt.Checked

    def heatmap(self, state):
        self.pipeline_thread.use_heatmap = state == QtCore.Qt.Checked

    def previous(self):
        cam_idx = self.cams_combo_box.currentIndex()
        if cam_idx == 0: return
        self.cams_combo_box.setCurrentIndex(cam_idx-1)
        self.setCamera()

    def next(self):
        cam_idx = self.cams_combo_box.currentIndex()
        if cam_idx == len(self.available_cams)-1: return
        self.cams_combo_box.setCurrentIndex(cam_idx+1)
        self.setCamera()

    def setCamera(self):
        cam_idx = self.cams_combo_box.currentIndex()
        self.pipeline_thread.source = self.available_cams[cam_idx]

    class RunPipeline(QtCore.QRunnable):
        def __init__(self, flowMonitor, use_counter, use_distance, use_heatmap):
            super().__init__()
            self.use_counter = use_counter
            self.use_distance = use_distance
            self.use_heatmap = use_heatmap
            self.source = flowMonitor.source
            self.flowMonitor = flowMonitor
            self.label = None

        def __resize_img_padded(self, image, shape):
            src_w, src_h = image.shape[:2][::-1]
            dst_w, dst_h = shape

            ratio = min(dst_w/src_w, dst_h/src_h)

            image_resized = cv2.resize(image, (int(src_w*ratio), int(src_h*ratio)))

            image_padded = np.full((dst_h,dst_w,3), (0,0,0), np.uint8)

            src_w, src_h = image_resized.shape[:2][::-1]
            xx = (dst_w - src_w) // 2
            yy = (dst_h - src_h) // 2

            image_padded[yy:yy+src_h, xx:xx+src_w] = image_resized

            return image_padded

        def run(self):
            local_use_counter = self.use_counter
            local_use_distance = self.use_distance
            local_use_heatmap = self.use_heatmap
            local_source = self.source
            app = QtCore.QCoreApplication.instance()
            while True:
                if local_source != self.source:
                    local_source = self.source
                    self.flowMonitor.source = local_source
                    self.flowMonitor.updateDataset()
                if local_use_counter != self.use_counter:
                    local_use_counter = self.use_counter
                    self.flowMonitor.use_counter = local_use_counter
                if local_use_distance != self.use_distance:
                    local_use_distance = self.use_distance
                    self.flowMonitor.use_distance = local_use_distance
                if local_use_heatmap != self.use_heatmap:
                    local_use_heatmap = self.use_heatmap
                    self.flowMonitor.use_heatmap = local_use_heatmap
                image = self.flowMonitor.detect()

                dst_size = self.label.size()
                image = self.__resize_img_padded(image, (dst_size.width(), dst_size.height()))

                height, width = image.shape[:2]
                bytesPerLine = 3 * width
                qImg = QtGui.QImage(image.data, width, height, bytesPerLine, QtGui.QImage.Format_BGR888)
                self.label.setPixmap(QtGui.QPixmap(qImg))
            app.quit()

    def linkComponentToMethod(self):

        self.checkbox_counter.stateChanged.connect(self.counter)
        self.checkbox_distance.stateChanged.connect(self.distance)
        self.checkbox_heatmap.stateChanged.connect(self.heatmap)

        self.prev_cam_button.clicked.connect(self.previous)
        self.next_cam_button.clicked.connect(self.next)

        self.cams_combo_box.activated.connect(self.setCamera)

    def startPipeline(self):
        self.pipeline_thread.label = self.label
        QtCore.QThreadPool.globalInstance().start(self.pipeline_thread)

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    demo = Ui_MainWindow()
    demo.show()
    demo.startPipeline()
    sys.exit(app.exec_())